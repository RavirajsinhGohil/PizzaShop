-- 1. Query: Total Sales Per Product Category
-- Find the total revenue generated for each product category.
SELECT P.category, SUM(OD.Quantity * OD.price) FROM OrderDetails OD
JOIN Products P on P.productid = OD.productid
GROUP BY P.category;

	
-- 2. Query: Top 5 Customers by Total Spending
-- Identify the top 5 customers who have spent the most on delivered orders.
SELECT C.customerid, C.customername, SUM(O.totalamount) FROM Customers C
Join Orders O on O.customerid = C.customerid
GROUP BY C.customerid, C.customername, O.totalamount
ORDER BY O.totalamount desc
LIMIT 5;


-- 3. Query: Monthly Sales Growth Rate
-- Compute the month-over-month sales growth percentage.
WITH cte AS (
    SELECT TO_CHAR(OrderDate, 'YYYY-mm') AS Month, SUM(TotalAmount) AS Sales FROM Orders
    WHERE orderstatus = 'Delivered'
    GROUP BY Month
)
SELECT Month, Sales,
       LAG(Sales) OVER (ORDER BY Month) AS PreviousMonthSales,
       ((Sales - LAG(Sales) OVER (ORDER BY Month)) / LAG(Sales) OVER (ORDER BY Month)) * 100 AS GrowthRate
FROM cte;

	
-- 4. Query: Average Order Value (AOV) Per Customer
-- Find the average amount spent per order by each customer.
SELECT C.customerid, C.customername, AVG(o.totalamount) from Customers C
JOIN Orders O ON O.customerid = C.customerid
GROUP BY C.customerid, C.customername
ORDER BY C.customerid


-- 5. Query: Products with Low Stock
-- Identify products where the stock quantity is below a given threshold.
SELECT P.productid, P.productname, P.stockquantity, OD.quantity FROM Products P
JOIN OrderDetails OD ON OD.productid = P.productid
WHERE OD.quantity > P.stockquantity

	
-- 6. Query: Most Frequently Purchased Products
-- Find the top 10 most frequently ordered products.
SELECT P.productid, P.productname, SUM(OD.quantity) AS TotalOrder FROM Products P
JOIN OrderDetails OD ON OD.productid = P.productid
GROUP BY P.productid, P.productname
ORDER BY TotalOrder DESC
LIMIT 10

	
-- 7. Query: Customer Retention Analysis
-- Calculate the percentage of customers who placed another order within 90 days of their first order.	
WITH first_order AS (
    SELECT customerid, MIN(orderdate) AS first_order_date FROM orders
    GROUP BY customerid
),
repeat_order AS (
    SELECT
        o.customerid, o.orderdate, fo.first_order_date FROM orders o
    JOIN first_order fo ON o.customerid = fo.customerid
    WHERE
        o.orderdate > fo.first_order_date AND o.orderdate <= fo.first_order_date + INTERVAL '90 days'
		AND o.orderid != (SELECT MIN(orderid) FROM orders WHERE customerid = o.customerid)
)
SELECT 
    (COUNT(DISTINCT repeat_order.customerid) * 100.0 / COUNT(DISTINCT first_order.customerid)) AS Retention
FROM first_order
LEFT JOIN repeat_order ON first_order.CustomerID = repeat_order.CustomerID;

	
-- 8. Query: Revenue Contribution of Each Payment Method
-- Determine the percentage of total revenue generated by each payment method.
SELECT p.PaymentMethod, PMM.Payment_Method_Name, SUM(p.Amount) * 100 / (SELECT SUM(Amount) FROM Payments) AS RevenuePercentage
FROM Payments p
JOIN Payment_Method_Master PMM ON PMM.Payment_Method_MasterID = p.PaymentMethod
GROUP BY p.PaymentMethod, PMM.Payment_Method_Name;

	
-- 9. Query: Order Processing Time Analysis
-- Find the average time taken for an order to move from ‘Pending’ to ‘Delivered’ status.
WITH DeliveredOrders AS (
    SELECT OrderID, OrderDate, 
           (SELECT OrderDate FROM Orders WHERE OrderID = o.OrderID AND o.status = 3) AS DeliveredDate
    FROM Orders o
)
SELECT AVG(DeliveredDate - OrderDate) AS AvgProcessingTime
FROM DeliveredOrders;

	
-- 10. Query: Repeat Customer Rate
-- Calculate the percentage of customers who have made more than one purchase
SELECT (COUNT(DISTINCT CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM Customers)) AS RepeatCustomerRate
FROM Orders
WHERE CustomerID IN (
SELECT CustomerID FROM Orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1
);


